import * as v from "valibot";
import {
  asInteger,
  snowflake,
  timestamp,
  boundedInteger
} from "@discordkit/core";
import { stickerSchema } from "../../sticker/types/Sticker.js";
import {
  type Application,
  applicationSchema
} from "../../application/types/Application.js";
import type { User } from "../../user/types/User.js";
import { userSchema } from "../../user/types/User.js";
import { type Reaction, reactionSchema } from "./Reaction.js";
import { type Channel, channelSchema } from "../../channel/types/Channel.js";
import { messageActivitySchema } from "./MessageActivity.js";
import { type ChannelMention, channelMentionSchema } from "./ChannelMention.js";
import type { Embed } from "./Embed.js";
import { embedSchema } from "./Embed.js";
import { messageReferenceSchema } from "./MessageReference.js";
import { type Attachment, attachmentSchema } from "./Attachment.js";
import { messageTypeSchema } from "./MessageType.js";
import { messageInteractionSchema } from "../../interactions/types/MessageInteraction.js";
import { messageComponentSchema } from "./MessageComponent.js";
import { roleSubscriptionDataSchema } from "./RoleSubscriptionData.js";
import { messageFlag } from "./MessageFlag.js";
import { type Poll, pollSchema } from "../../poll/types/Poll.js";
import {
  type MessageSnapshot,
  messageSnapshotSchema
} from "./MessageSnapshot.js";
import { applicationCommandInteractionMetadataSchea } from "./ApplicationCommandInteractionMetadata.js";
import { type MessageCall, messageCallSchema } from "./MessageCall.js";

export const messageSchema = v.object({
  /** id of the message */
  id: snowflake,
  /** id of the channel the message was sent in */
  channelId: snowflake,
  /** user object	the author of this message (not guaranteed to be a valid user, see below) */
  author: userSchema as v.GenericSchema<User>,
  /** contents of the message */
  content: v.string(),
  /** when this message was sent */
  timestamp: timestamp,
  /** when this message was edited (or null if never) */
  editedTimestamp: v.nullable(timestamp),
  /** whether this was a TTS message */
  tts: v.boolean(),
  /** whether this message mentions everyone */
  mentionEveryone: v.boolean(),
  /** users specifically mentioned in the message */
  mentions: v.array<v.GenericSchema<User>>(userSchema),
  /** roles specifically mentioned in this message */
  mentionRoles: v.array(snowflake),
  /** channels specifically mentioned in this message */
  mentionChannels: v.nullish<v.GenericSchema<ChannelMention[]>>(
    v.array(channelMentionSchema)
  ),
  /** any attached files */
  attachments: v.array(attachmentSchema) as v.GenericSchema<Attachment[]>,
  /** any embedded content */
  embeds: v.array(embedSchema) as v.GenericSchema<Embed[]>,
  /** reactions to the message */
  reactions: v.exactOptional<v.GenericSchema<Reaction[]>>(
    v.array(reactionSchema)
  ),
  /** used for validating a message was sent */
  nonce: v.exactOptional<v.GenericSchema<number | string>>(
    v.union([v.number(), v.string()])
  ),
  /** whether this message is pinned */
  pinned: v.boolean(),
  /** if the message is generated by a webhook, this is the webhook's id */
  webhookId: v.exactOptional(snowflake),
  /** type of message */
  type: messageTypeSchema,
  /** sent with Rich Presence-related chat embeds */
  activity: v.exactOptional(messageActivitySchema),
  /** sent with Rich Presence-related chat embeds */
  application: v.exactOptional<v.GenericSchema<Partial<Application>>>(
    v.lazy(() => v.partial(applicationSchema))
  ),
  /** if the message is an Interaction or application-owned webhook, this is the id of the application */
  applicationId: v.exactOptional(snowflake),
  /** message flags combined as a bitfield */
  flags: asInteger(messageFlag),
  /** data showing the source of a crosspost, channel follow add, pin, or reply message */
  messageReference: v.exactOptional(messageReferenceSchema),
  /** the message associated with the message_reference. This is a minimal subset of fields in a message (e.g. author is excluded.) */
  messageSnapshots: v.exactOptional(
    v.array(messageSnapshotSchema) as v.GenericSchema<MessageSnapshot[]>
  ),
  /** the message associated with the message_reference */
  referencedMessage: v.nullish(v.lazy((): v.GenericSchema => messageSchema)),
  /** Sent if the message is sent as a result of an interaction */
  interactionMetadata: v.exactOptional(
    applicationCommandInteractionMetadataSchea
  ),
  /** **Deprecated in favor of `interaction_metadata`**; sent if the message is a response to an interaction */
  interaction: v.exactOptional(messageInteractionSchema),
  /** the thread that was started from this message, includes thread member object */
  thread: v.exactOptional<v.GenericSchema<Channel>>(channelSchema),
  /** sent if the message contains components like buttons, action rows, or other interactive components */
  components: v.exactOptional(v.array(messageComponentSchema)),
  /** sent if the message contains stickers */
  stickerItems: v.exactOptional(v.array(stickerSchema)),
  /** @deprecated the stickers sent with the message */
  stickers: v.exactOptional(v.array(stickerSchema)),
  /** A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with totalMessageSent on parent thread */
  position: v.exactOptional(boundedInteger()),
  /** data of the role subscription purchase or renewal that prompted this `ROLE_SUBSCRIPTION_PURCHASE` message */
  roleSubscriptionData: v.exactOptional(roleSubscriptionDataSchema),
  /** data for users, members, channels, and roles in the message's auto-populated select menus */
  resolved: v.exactOptional(v.unknown()), // intentionally unknown because it would cause a cyclical dependency
  /** A poll! */
  poll: v.exactOptional<v.GenericSchema<Poll>>(pollSchema),
  /** the call associated with the message */
  call: v.exactOptional<v.GenericSchema<MessageCall>>(messageCallSchema)
});

export interface Message extends v.InferOutput<typeof messageSchema> {}
