import {
  object,
  string,
  isoTimestamp,
  boolean,
  array,
  nullish,
  union,
  number,
  partial,
  integer,
  unknown,
  pipe,
  nullable,
  exactOptional,
  lazy,
  type InferOutput
} from "valibot";
import { asInteger, snowflake } from "@discordkit/core";
import { stickerSchema } from "../../sticker/types/Sticker.js";
import { applicationSchema } from "../../application/types/Application.js";
import { userSchema } from "../../user/types/User.js";
import { reactionSchema } from "./Reaction.js";
import { channelSchema } from "../../channel/types/Channel.js";
import { messageActivitySchema } from "./MessageActivity.js";
import { channelMentionSchema } from "./ChannelMention.js";
import { embedSchema } from "./Embed.js";
import { messageReferenceSchema } from "./MessageReference.js";
import { attachmentSchema } from "./Attachment.js";
import { messageTypeSchema } from "./MessageType.js";
import { messageInteractionSchema } from "./MessageInteraction.js";
import { messageComponentSchema } from "./MessageComponent.js";
import { roleSubscriptionDataSchema } from "../../channel/types/RoleSubscriptionData.js";
import { messageFlag } from "./MessageFlag.js";

export const messageSchema = object({
  /** id of the message */
  id: snowflake,
  /** id of the channel the message was sent in */
  channelId: snowflake,
  /** user object	the author of this message (not guaranteed to be a valid user, see below) */
  author: userSchema,
  /** contents of the message */
  content: string(),
  /** when this message was sent */
  timestamp: pipe(string(), isoTimestamp()),
  /** when this message was edited (or null if never) */
  editedTimestamp: nullable(pipe(string(), isoTimestamp())),
  /** whether this was a TTS message */
  tts: boolean(),
  /** whether this message mentions everyone */
  mentionEveryone: boolean(),
  /** users specifically mentioned in the message */
  mentions: array(userSchema),
  /** roles specifically mentioned in this message */
  mentionRoles: array(snowflake),
  /** channels specifically mentioned in this message */
  mentionChannels: nullish(array(channelMentionSchema)),
  /** any attached files */
  attachments: array(attachmentSchema),
  /** any embedded content */
  embeds: array(embedSchema),
  /** reactions to the message */
  reactions: exactOptional(array(reactionSchema)),
  /** used for validating a message was sent */
  nonce: exactOptional(union([number(), string()])),
  /** whether this message is pinned */
  pinned: boolean(),
  /** if the message is generated by a webhook, this is the webhook's id */
  webhookId: exactOptional(snowflake),
  /** type of message */
  type: messageTypeSchema,
  /** sent with Rich Presence-related chat embeds */
  activity: exactOptional(messageActivitySchema),
  /** sent with Rich Presence-related chat embeds */
  application: exactOptional(lazy(() => partial(applicationSchema))),
  /** if the message is an Interaction or application-owned webhook, this is the id of the application */
  applicationId: exactOptional(snowflake),
  /** message flags combined as a bitfield */
  flags: asInteger(messageFlag),
  /** data showing the source of a crosspost, channel follow add, pin, or reply message */
  messageReference: exactOptional(messageReferenceSchema),
  /** the message associated with the message_reference. This is a minimal subset of fields in a message (e.g. author is excluded.) */
  // TODO messageSnapshots: exactOptional(array(messageSnapshotSchema)),
  /** the message associated with the message_reference */
  referencedMessage: nullish(lazy(() => messageSchema)),
  /** Sent if the message is sent as a result of an interaction */
  // TODO: interactionMetadata: exactOptional(messageInteractionMetadataSchema),
  /** **Deprecated in favor of `interaction_metadata`**; sent if the message is a response to an interaction */
  interaction: exactOptional(messageInteractionSchema),
  /** the thread that was started from this message, includes thread member object */
  thread: exactOptional(channelSchema),
  /** sent if the message contains components like buttons, action rows, or other interactive components */
  components: exactOptional(array(messageComponentSchema)),
  /** sent if the message contains stickers */
  stickerItems: exactOptional(array(stickerSchema)),
  /** @deprecated the stickers sent with the message */
  stickers: exactOptional(array(stickerSchema)),
  /** A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with totalMessageSent on parent thread */
  position: exactOptional(pipe(number(), integer())),
  /** data of the role subscription purchase or renewal that prompted this `ROLE_SUBSCRIPTION_PURCHASE` message */
  roleSubscriptionData: exactOptional(roleSubscriptionDataSchema),
  /** data for users, members, channels, and roles in the message's auto-populated select menus */
  resolved: exactOptional(unknown()) // intentionally unknown because it would cause a cyclical dependency
  /** A poll! */
  // TODO poll: exactOptional(pollSchema),
  /** the call associated with the message */
  // TODO call: exactOptional(messageCallSchema)
});

export type Message = InferOutput<typeof messageSchema>;
