import type { Sticker } from "../../sticker";
import type { Application } from "../../application";
import type { Reaction } from "../../emoji";
import type { Member } from "../../guild";
import type { User } from "../../user";
import type { Channel } from "./Channel";
import type { InteractionType } from "./InteractionType";
import type { MessageActivity } from "./MessageActivity";
import type { ChannelMention } from "./ChannelMention";
import type { Embed } from "./Embed";
import type { MessageReference } from "./MessageReference";
import type { Attachment } from "./Attachment";
import type { MessageFlag } from "./MessageFlag";

export interface Message {
  /** id of the message */
  id: string;
  /** id of the channel the message was sent in */
  channelId: string;
  /** user object	the author of this message (not guaranteed to be a valid user, see below) */
  author?: User;
  /** contents of the message */
  content: string;
  /** when this message was sent */
  timestamp: string;
  /** when this message was edited (or null if never) */
  editedTimestamp?: string;
  /** whether this was a TTS message */
  tts: boolean;
  /** whether this message mentions everyone */
  mentionEveryone: boolean;
  /** users specifically mentioned in the message */
  mentions: User[];
  /** roles specifically mentioned in this message */
  mentionRoles: string[];
  /** channels specifically mentioned in this message */
  mentionChannels?: ChannelMention[];
  /** any attached files */
  attachments?: Attachment[];
  /** any embedded content */
  embeds?: Embed[];
  /** reactions to the message */
  reactions?: Reaction[];
  /** used for validating a message was sent */
  nonce?: number | string;
  /** whether this message is pinned */
  pinned: boolean;
  /** if the message is generated by a webhook, this is the webhook's id */
  webhookId?: string;
  /** type of message */
  type: number;
  /** sent with Rich Presence-related chat embeds */
  activity?: MessageActivity;
  /** sent with Rich Presence-related chat embeds */
  application?: Application;
  /** if the message is an Interaction or application-owned webhook, this is the id of the application */
  applicationId?: string;
  /** data showing the source of a crosspost, channel follow add, pin, or reply message */
  messageReference?: MessageReference;
  /** message flags combined as a bitfield */
  flags?: MessageFlag;
  /** the message associated with the message_reference */
  referencedMessage?: Message;
  /** sent if the message is a response to an Interaction */
  interaction?: {
    /** id of the interaction */
    id: string;
    /** the type of interaction */
    type: InteractionType;
    /** the name of the application command */
    name: string;
    /** the user who invoked the interaction */
    user: Partial<User>;
    /** the member who invoked the interaction in the guild */
    member?: Partial<Member>;
  };
  /** the thread that was started from this message, includes thread member object */
  thread?: Channel;
  /** sent if the message contains components like buttons, action rows, or other interactive components */
  //components?: MessageComponent[];
  /** sent if the message contains stickers */
  stickerItems?: Sticker[];
}
